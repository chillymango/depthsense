{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyODiV2hmGzDsHeQxTm0nEaR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R6jcszfgjJ6o","executionInfo":{"status":"ok","timestamp":1743799591350,"user_tz":240,"elapsed":438,"user":{"displayName":"YoungJin Lee","userId":"12553577911984349914"}},"outputId":"5f4cdf3f-7c59-467c-88a1-7056e0340aa5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean absolute error: 0.0\n","Max difference: 0.0\n","Outputs nearly equal: True\n"]}],"source":["import torch\n","import tensorflow as tf\n","import numpy as np\n","\n","# ------------ Config ------------ #\n","B, dim, H, W = 1, 1, 4, 4  # small input for test clarity\n","device = 'cpu'\n","# -------------------------------- #\n","\n","# Generate dummy test input\n","np.random.seed(0)\n","torch.manual_seed(0)\n","\n","input_np = np.random.rand(B, dim, H, W).astype(np.float32)\n","weights_np = np.random.rand(B, 1, H, W).astype(np.float32)\n","\n","# Repeat weights for each direction\n","dlr_np = weights_np.copy()\n","drl_np = weights_np.copy()\n","dud_np = weights_np.copy()\n","ddu_np = weights_np.copy()\n","\n","# === Run PyTorch Version ===\n","def propagate(data, dlr, drl, dud, ddu, dim):\n","    \"\"\"\n","    4-pass directional propagation using learned edge weights.\n","    Applies to both depth (dim=1) and normals (dim=3).\n","    \"\"\"\n","    B, _, H, W = data.shape\n","    if dim > 1:\n","        dlr = dlr.repeat(1, dim, 1, 1)\n","        drl = drl.repeat(1, dim, 1, 1)\n","        dud = dud.repeat(1, dim, 1, 1)\n","        ddu = ddu.repeat(1, dim, 1, 1)\n","\n","    x = torch.zeros((B, dim, H, 1), device=data.device)\n","    current = torch.cat([x, data], dim=3)[..., :W]\n","    out = current * dlr + data * (1 - dlr)\n","\n","    x = torch.zeros((B, dim, H, 1), device=data.device)\n","    current = torch.cat([out, x], dim=3)[..., 1:]\n","    out = current * drl + out * (1 - drl)\n","\n","    x = torch.zeros((B, dim, 1, W), device=data.device)\n","    current = torch.cat([x, out], dim=2)[:, :, :H, :]\n","    out = current * dud + out * (1 - dud)\n","\n","    x = torch.zeros((B, dim, 1, W), device=data.device)\n","    current = torch.cat([out, x], dim=2)[:, :, 1:, :]\n","    out = current * ddu + out * (1 - ddu)\n","\n","    return out\n","\n","input_pt = torch.tensor(input_np).to(device)\n","dlr = torch.tensor(dlr_np).to(device)\n","drl = torch.tensor(drl_np).to(device)\n","dud = torch.tensor(dud_np).to(device)\n","ddu = torch.tensor(ddu_np).to(device)\n","\n","out_pt = propagate(input_pt, dlr, drl, dud, ddu, dim=1).detach().cpu().numpy()\n","\n","# === Run TensorFlow Version ===\n","@tf.function\n","def tf_propagate(input_data, dlr, drl, dud, ddu, dim):\n","    if dim > 1:\n","        dlr = tf.tile(dlr, [1, 1, 1, dim])\n","        drl = tf.tile(drl, [1, 1, 1, dim])\n","        dud = tf.tile(dud, [1, 1, 1, dim])\n","        ddu = tf.tile(ddu, [1, 1, 1, dim])\n","\n","    x = tf.zeros((B, H, 1, dim), dtype=tf.float32)\n","    current = tf.concat([x, input_data], axis=2)\n","    current = tf.split(current, [W, -1], axis=2)[0]\n","    output = current * dlr + input_data * (1 - dlr)\n","\n","    x = tf.zeros((B, H, 1, dim), dtype=tf.float32)\n","    current = tf.concat([output, x], axis=2)\n","    current = tf.split(current, [-1, W], axis=2)[1]\n","    output = current * drl + output * (1 - drl)\n","\n","    x = tf.zeros((B, 1, W, dim), dtype=tf.float32)\n","    current = tf.concat([x, output], axis=1)\n","    current = tf.split(current, [H, -1], axis=1)[0]\n","    output = current * dud + output * (1 - dud)\n","\n","    x = tf.zeros((B, 1, W, dim), dtype=tf.float32)\n","    current = tf.concat([output, x], axis=1)\n","    current = tf.split(current, [-1, H], axis=1)[1]\n","    output = current * ddu + output * (1 - ddu)\n","\n","    return output\n","\n","input_tf = tf.convert_to_tensor(np.transpose(input_np, (0, 2, 3, 1)))  # NCHW → NHWC\n","dlr_tf = tf.convert_to_tensor(np.transpose(dlr_np, (0, 2, 3, 1)))\n","drl_tf = tf.convert_to_tensor(np.transpose(drl_np, (0, 2, 3, 1)))\n","dud_tf = tf.convert_to_tensor(np.transpose(dud_np, (0, 2, 3, 1)))\n","ddu_tf = tf.convert_to_tensor(np.transpose(ddu_np, (0, 2, 3, 1)))\n","\n","out_tf = tf_propagate(input_tf, dlr_tf, drl_tf, dud_tf, ddu_tf, dim=1)\n","out_tf = np.transpose(out_tf.numpy(), (0, 3, 1, 2))  # NHWC → NCHW\n","\n","# === Compare ===\n","print(\"Mean absolute error:\", np.mean(np.abs(out_tf - out_pt)))\n","print(\"Max difference:\", np.max(np.abs(out_tf - out_pt)))\n","print(\"Outputs nearly equal:\", np.allclose(out_tf, out_pt, atol=1e-5))\n"]},{"cell_type":"code","source":["print(out_tf.shape)\n","print(out_tf)\n","print(out_pt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jIfWl8srkEdM","executionInfo":{"status":"ok","timestamp":1743799763352,"user_tz":240,"elapsed":8,"user":{"displayName":"YoungJin Lee","userId":"12553577911984349914"}},"outputId":"0703f9e2-9650-4408-ebab-7803a4847ed7"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 1, 4, 4)\n","[[[[0.52780265 0.55249596 0.4759955  0.07636455]\n","   [0.7880243  0.6081733  0.6361797  0.10773454]\n","   [0.7816971  0.6292127  0.6615874  0.04134203]\n","   [0.33164957 0.37794712 0.27275464 0.00837589]]]]\n","[[[[0.52780265 0.55249596 0.4759955  0.07636455]\n","   [0.7880243  0.6081733  0.6361797  0.10773454]\n","   [0.7816971  0.6292127  0.6615874  0.04134203]\n","   [0.33164957 0.37794712 0.27275464 0.00837589]]]]\n"]}]}]}